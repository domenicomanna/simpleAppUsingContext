{"version":3,"sources":["components/Layout.tsx","contexts/ClothesContext.tsx","api/ClothesApiClient.ts","components/ClotheItem.tsx","components/ClotheItemsList.tsx","components/FavoritedClotheItemsList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Layout","children","className","to","clothesApiClient","id","description","isFavorited","ClothesContext","createContext","ClothesContextProvider","useState","clotheItems","setClotheItems","isLoading","setLoading","useEffect","getClothes","Provider","value","toggleFavorite","updatedClotheItems","map","c","ClotheItem","clothesContext","useContext","onClick","ClotheItemsList","context","key","FavoritedClotheItemsList","favoritedClotheItems","filter","length","App","path","component","exact","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a470d2db.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../App.css';\n\nconst Layout: FunctionComponent = ({ children }) => {\n  return (\n    <>\n      <nav>\n        <div className='container'>\n          <ul className='navbar'>\n            <li>\n              <Link to='/'>All Clothes</Link>\n            </li>\n            <li>\n              <Link to='/favorited-clothes'>Favorited Clothes</Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n\n      <main className=\"container\">{children}</main>\n\n      <footer></footer>\n    </>\n  );\n};\n\nexport default Layout;\n","import React, { createContext, useEffect, useState, FunctionComponent } from 'react';\nimport IClotheItem from '../models/IClotheItem';\nimport ClothesApiClient from '../api/ClothesApiClient';\n\nconst clothesApiClient = new ClothesApiClient();\n\ninterface IClothesContext {\n  clotheItems: IClotheItem[];\n  isLoading: boolean;\n  toggleFavorite: (id: number) => void;\n}\n\nexport const ClothesContext = createContext<IClothesContext>({} as IClothesContext)\n\nconst ClothesContextProvider:FunctionComponent = ({children}) => {\n  const [clotheItems, setClotheItems] = useState<IClotheItem[]>([]);\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    let clotheItems = clothesApiClient.getClothes();\n    setClotheItems(clotheItems);\n    setLoading(false);\n  }, []);\n\n  function toggleFavorite(id: number) {\n    let updatedClotheItems = clotheItems.map(c => c.id === id ? { ...c, isFavorited: !c.isFavorited } : c);\n    setClotheItems(updatedClotheItems);\n  }\n\n  return (\n    <ClothesContext.Provider\n      value={{ clotheItems: clotheItems, toggleFavorite: toggleFavorite, isLoading: isLoading}}>\n        {children}\n    </ClothesContext.Provider>\n  );\n};\n\nexport default ClothesContextProvider;\n","import IClotheItem from '../models/IClotheItem';\n\nexport default class ClothesApiClient {\n  getClothes(): IClotheItem[] {\n    // fake api call...\n    return [\n      { id: 1, description: 'A lovely t-shirt', isFavorited: false },\n      { id: 2, description: 'A lovely blouse', isFavorited: false },\n      { id: 3, description: 'A lovely dress', isFavorited: false },\n      { id: 4, description: 'A lovely suit', isFavorited: false },\n      { id: 5, description: 'An awesome pair of shoes', isFavorited: false },\n      { id: 6, description: 'An awesome belt', isFavorited: false }\n    ];\n  }\n}\n","import React, { FunctionComponent, useContext } from 'react';\nimport { ClothesContext } from '../contexts/ClothesContext';\n\ninterface IProps {\n  id: number;\n  description: string;\n  isFavorited: boolean;\n}\n\nconst ClotheItem: FunctionComponent<IProps> = ({ id, description, isFavorited }) => {\n  const clothesContext = useContext(ClothesContext);\n  return (\n    <li className='clotheItem'>\n      <p>{description}</p>\n      <button onClick={() => clothesContext.toggleFavorite(id)} className='favorite-clothe-item-button'>\n        {isFavorited ? 'Unfavorite' : 'Favorite'}\n      </button>\n    </li>\n  );\n};\n\nexport default ClotheItem\n","import React, { useContext } from 'react';\nimport { ClothesContext } from '../contexts/ClothesContext';\nimport IClotheItem from '../models/IClotheItem';\nimport ClotheItem from './ClotheItem';\n\nconst ClotheItemsList = () => {\n  const context = useContext(ClothesContext);\n\n  return context.isLoading ? (\n    <h1>Loading...</h1>\n  ) : (\n    <ul className='clotheItems'>{transformClotheItems(context.clotheItems)}</ul>\n  );\n};\n\nfunction transformClotheItems(clotheItems: IClotheItem[]) {\n  return clotheItems.map(c => (\n    <ClotheItem key={c.id} id={c.id} description={c.description} isFavorited={c.isFavorited} />\n  ));\n}\n\nexport default ClotheItemsList;\n","import React, { useContext } from 'react';\nimport { ClothesContext } from '../contexts/ClothesContext';\nimport IClotheItem from '../models/IClotheItem';\nimport ClotheItem  from './ClotheItem';\n\nconst FavoritedClotheItemsList = () => {\n  const context = useContext(ClothesContext);\n  const favoritedClotheItems = context.clotheItems.filter(c => c.isFavorited);\n    \n  return favoritedClotheItems.length === 0 ? (\n    <h1>You have no favorited clothes :(</h1>\n  ) : (\n    <ul className='clotheItems'>{transformClotheItems(favoritedClotheItems)}</ul>\n  );\n};\n\nfunction transformClotheItems(clotheItems: IClotheItem[]) {\n  return clotheItems.map(c => (\n    <ClotheItem key={c.id} id={c.id} description={c.description} isFavorited={c.isFavorited} />\n  ));\n}\n\nexport default FavoritedClotheItemsList;\n","import React from 'react';\nimport './App.css';\nimport Layout from './components/Layout';\nimport ClothesContextProvider from './contexts/ClothesContext';\nimport ClotheItemsList from './components/ClotheItemsList';\nimport { Switch, Route } from 'react-router-dom';\nimport FavoritedClotheItemsList from './components/FavoritedClotheItemsList';\n\nconst App = () => {\n  return (\n    <Layout>\n      <ClothesContextProvider>\n        <Switch>\n          <Route path=\"/\" component={ClotheItemsList} exact />\n          <Route path=\"/favorited-clothes\" component={FavoritedClotheItemsList}/>\n        </Switch>\n      </ClothesContextProvider>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst app = <BrowserRouter><App/></BrowserRouter>\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}